using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Galapagos;

namespace Genetic
{
    class Program
    {
        private static readonly char[,] _board1 = new char[,]
            {
                { '2', '8', '9', '?', '?', '7', '3', '?', '?' },
                { '?', '7', '6', '?', '?', '?', '?', '?', '?' },
                { '?', '?', '?', '1', '6', '?', '9', '?', '?' },
                { '5', '?', '1', '2', '?', '?', '8', '9', '?' },
                { '4', '?', '?', '8', '3', '6', '?', '?', '5' },
                { '?', '6', '2', '?', '?', '5', '4', '?', '7' },
                { '?', '?', '8', '?', '2', '9', '?', '?', '?' },
                { '?', '?', '?', '?', '?', '?', '6', '4', '?' },
                { '?', '?', '5', '4', '?', '?', '7', '2', '9' }
            };

        private static readonly char[,] _board2 = new char[,]
            {
                { '?', '?', '4', '8', '?', '?', '?', '1', '7' },
                { '6', '7', '?', '9', '?', '?', '?', '?', '?' },
                { '5', '?', '8', '?', '3', '?', '?', '?', '4' },
                { '3', '?', '?', '7', '4', '?', '1', '?', '?' },
                { '?', '6', '9', '?', '?', '?', '7', '8', '?' },
                { '?', '?', '1', '?', '6', '9', '?', '?', '5' },
                { '1', '?', '?', '?', '8', '?', '3', '?', '6' },
                { '?', '?', '?', '?', '?', '6', '?', '9', '1' },
                { '2', '4', '?', '?', '?', '1', '5', '?', '?' }
            };

        private static readonly char[,] _board3 = new char[,]
            {
                { '?', '?', '?', '?', '?', '?', '?', '?', '?' },
                { '?', '?', '?', '?', '?', '?', '?', '?', '?' },
                { '?', '?', '?', '?', '?', '?', '?', '?', '?' },
                { '?', '?', '?', '?', '?', '?', '?', '?', '?' },
                { '?', '?', '?', '?', '?', '?', '?', '?', '?' },
                { '?', '?', '?', '?', '?', '?', '?', '?', '?' },
                { '?', '?', '?', '?', '?', '?', '?', '?', '?' },
                { '?', '?', '?', '?', '?', '?', '?', '?', '?' },
                { '?', '?', '?', '?', '?', '?', '?', '?', '?' }
            };

        private static readonly char[,] _board4 = new char[,]
            {
                { '3', '4', '?', '?', '?', '8', '7', '?', '2' },
                { '?', '?', '?', '?', '?', '?', '6', '?', '?' },
                { '?', '?', '?', '9', '?', '2', '4', '?', '5' },
                { '6', '?', '?', '8', '?', '?', '3', '?', '?' },
                { '9', '?', '?', '4', '2', '1', '?', '?', '8' },
                { '?', '?', '2', '?', '?', '3', '?', '?', '9' },
                { '4', '?', '1', '3', '?', '9', '?', '?', '?' },
                { '?', '?', '6', '?', '?', '?', '?', '?', '?' },
                { '5', '?', '3', '2', '?', '?', '?', '1', '4' }
            };

        private static readonly char[,] _board5 = new char[,]
            {
                { '8', '?', '?', '?', '?', '?', '?', '?', '?' },
                { '?', '?', '3', '6', '?', '?', '?', '?', '?' },
                { '?', '7', '?', '?', '9', '?', '2', '?', '?' },
                { '?', '5', '?', '?', '?', '7', '?', '?', '?' },
                { '?', '?', '?', '?', '4', '5', '7', '?', '?' },
                { '?', '?', '?', '1', '?', '?', '?', '3', '?' },
                { '?', '?', '1', '?', '?', '?', '?', '6', '8' },
                { '?', '?', '8', '5', '?', '?', '?', '1', '?' },
                { '?', '9', '?', '?', '?', '?', '4', '?', '?' }
            };

        private static void LogSolution(uint[,] board)
        {
            for (var i = 0; i < 9; i++)
            {
                var sb = new StringBuilder();
                sb.Append(board[i, 0]);
                for (var j = 1; j < 9; j++)
                    sb.AppendFormat(",{0}", board[i, j]);
                Console.WriteLine(sb.ToString());
            }
        }

        static void Main(string[] args)
        {
            var stopwatch = new Stopwatch();
            stopwatch.Start();

            var puzzle = new Sudoku(_board1);
            var solution = puzzle.Solve();
            LogSolution(solution);

            stopwatch.Stop();
            Console.WriteLine($"Runtime: {stopwatch.Elapsed.Minutes} minutes, {stopwatch.Elapsed.Seconds} seconds, {stopwatch.Elapsed.Milliseconds} milliseconds");

            Console.Read();
        }
    }
}